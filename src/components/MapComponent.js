import { useState, useEffect, useRef } from 'react';
import { useDispatch, useSelector } from 'react-redux';
import { YMaps, Map } from '@pbe/react-yandex-maps';
import config from '../config/config.json';

import { fetchRegions } from '../store/regions-slice'; // –∏–º–ø–æ—Ä—Ç thunk

import MapSearchBar from './UI/MapSearchBar';
import MapFilter from './UI/MapFilter';
import SideBar from './UI/SideBar';
import NavigateButtons from './UI/NavigateButtons';
import MapCalendar from './UI/MapCalendar';

function MapComponent() {
  const [mapReady, setMapReady] = useState(false);
  const dispatch = useDispatch();
  const { items: regions, status, error } = useSelector((s) => s.regions);
  const { isLoggedIn } = useSelector((s) => s.auth); // —á—Ç–æ–±—ã –Ω–µ –¥–µ—Ä–≥–∞—Ç—å –¥–æ –ª–æ–≥–∏–Ω–∞

  const mapRef = useRef(null);
  const omRef = useRef(null);
  const polylabelerRef = useRef(null);

  useEffect(() => {
    const check = async () => {
      if (!window.ymaps) {
        console.log('‚ùå ymaps –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è');
        return;
      }
      try {
        // –∂–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ API –∏ —Å–∞–º–æ–≥–æ –º–æ–¥—É–ª—è –ø–ª–∞–≥–∏–Ω–∞
        await window.ymaps.ready(['polylabel.create', 'util.calculateArea']);

        // –ø–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ø–ª–∞–≥–∏–Ω–∞ —á–µ—Ä–µ–∑ module loader
        const Polylabel = await window.ymaps.modules
          .require(['polylabel.create'])
          .then((Polylabel) => Polylabel);

        console.log('‚úÖ Polylabeler –ø–æ–¥–∫–ª—é—á—ë–Ω:', Polylabel);
      } catch (e) {
        console.log('‚ùå Polylabeler –Ω–µ –Ω–∞–π–¥–µ–Ω / –Ω–µ –∑–∞–≥—Ä—É–∑–∏–ª—Å—è', e);
      }
    };
    check();
  }, []);

  useEffect(() => {
    if (!mapReady || !window.ymaps || omRef.current) return;

    (async () => {
      const ymaps = window.ymaps;
      await ymaps.ready(['polylabel.create', 'util.calculateArea']);
      const map = mapRef.current;

      // ObjectManager
      const om = new ymaps.ObjectManager({
        clusterize: false,
        geoObjectOpenBalloonOnClick: false,
      });
      om.objects.options.set({
        fillColor: '#2D7DB8',
        fillOpacity: 0.6,
        strokeColor: '#FFFFFF',
        strokeOpacity: 0.9,
        strokeWidth: 1,
        zIndex: 100,
      });
      map.geoObjects.add(om);
      omRef.current = om;

      // Polylabeler
      const [createPolylabel] = await ymaps.modules.require(['polylabel.create']);
      polylabelerRef.current = createPolylabel(map, om);

      const buildFC = (geojson) => {
        const feats = (geojson?.features ?? []).flatMap((f, idx) => {
          const name =
            f.properties?.name ||
            f.properties?.name_ru ||
            f.properties?.hintContent ||
            `–†–µ–≥–∏–æ–Ω ${idx + 1}`;
          const make = (coords, part = 0) => ({
            type: 'Feature',
            id: `${idx}-${part}`,
            geometry: { type: 'Polygon', coordinates: coords },
            properties: { name },
            options: { labelDefaults: 'light', labelLayout: '{{properties.name}}' },
          });
          if (f.geometry?.type === 'Polygon') return [make(f.geometry.coordinates)];
          if (f.geometry?.type === 'MultiPolygon')
            return f.geometry.coordinates.map((c, p) => make(c, p));
          return [];
        });
        return { type: 'FeatureCollection', features: feats };
      };

      const addFCAndFit = (fc) => {
        om.removeAll();
        om.add(fc);
        const bounds = ymaps.geoQuery(fc).getBounds();
        if (bounds) map.setBounds(bounds, { checkZoomRange: true });
        console.log(`üü¶ –î–æ–±–∞–≤–ª–µ–Ω–æ –ø–æ–ª–∏–≥–æ–Ω–æ–≤: ${fc.features.length}`);
      };

      try {
        // –æ—Å–Ω–æ–≤–Ω–æ–π –ø—É—Ç—å: –≥—Ä–∞–Ω–∏—Ü—ã —á–µ—Ä–µ–∑ borders.load
        const borders = await ymaps.borders.load('RU', { lang: 'ru', quality: 2 });
        if (borders?.features) addFCAndFit(buildFC(borders));
        else if (borders?.geoObjects) {
          map.geoObjects.add(borders.geoObjects);
          borders.geoObjects.options.set({
            fillColor: '#2D7DB8',
            fillOpacity: 0.6,
            strokeColor: '#FFFFFF',
            strokeOpacity: 0.9,
            strokeWidth: 1,
          });
          polylabelerRef.current = createPolylabel(map, borders.geoObjects);
          const bounds = borders.geoObjects.getBounds?.();
          if (bounds) map.setBounds(bounds, { checkZoomRange: true });
        }
      } catch (e) {
        // –∑–∞–ø–∞—Å–Ω–æ–π: –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å regions.load, –ø–æ—Ç–æ–º –ª–æ–∫–∞–ª—å–Ω—ã–π —Ñ–∞–π–ª
        try {
          if (ymaps.regions?.load) {
            const res = await ymaps.regions.load('RU', { lang: 'ru', quality: 2 });
            if (res?.features) addFCAndFit(buildFC(res));
            else if (res?.geoObjects) {
              map.geoObjects.add(res.geoObjects);
              res.geoObjects.options.set({
                fillColor: '#2D7DB8',
                fillOpacity: 0.6,
                strokeColor: '#FFFFFF',
                strokeOpacity: 0.9,
                strokeWidth: 1,
              });
              polylabelerRef.current = createPolylabel(map, res.geoObjects);
            }
          } else {
            const r = await fetch(process.env.PUBLIC_URL + '/geo/ru_adm1.json');
            addFCAndFit(buildFC(await r.json()));
          }
        } catch (err) {
          console.error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≥—Ä–∞–Ω–∏—Ü—ã –†–§', err);
        }
      }
    })();

    // cleanup
    return () => {
      const map = mapRef.current;
      if (map && omRef.current) map.geoObjects.remove(omRef.current);
      omRef.current = null;
      polylabelerRef.current = null;
    };
  }, [mapReady]);

  /* ========================= –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã —Å –ë—ç–∫–∞ ========================= */

  // 1) –≥—Ä—É–∑–∏–º —Ä–µ–≥–∏–æ–Ω—ã –æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞—Ö–æ–¥–µ (–∏ –∫–æ–≥–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–ª—Å—è)
  useEffect(() => {
    if (isLoggedIn && status === 'idle') {
      dispatch(fetchRegions());
    }
  }, [dispatch, isLoggedIn, status]);

  // 2) –ø—Ä–æ—Å—Ç–æ –≤—ã–≤–µ–¥–µ–º –º–∞—Å—Å–∏–≤ –≤ –∫–æ–Ω—Å–æ–ª—å, –∫–æ–≥–¥–∞ –æ–Ω –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è
  useEffect(() => {
    if (status === 'succeeded') {
      console.log('–†–µ–≥–∏–æ–Ω—ã –ø–æ–ª—É—á–µ–Ω—ã:', regions);
      // –µ—Å–ª–∏ –≤ —Å–ª–∞–π—Å–µ –ø–∞—Ä—Å–∏—à—å geoJson -> regions[i].geometry –±—É–¥–µ—Ç —É–∂–µ –æ–±—ä–µ–∫—Ç–æ–º
    }
    if (status === 'failed') {
      console.warn('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ä–µ–≥–∏–æ–Ω–æ–≤:', error);
    }
  }, [status, regions, error]);

  /* ========================= –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ========================= */

  const mapClickHandler = (e) => {
    const coords = e.get('coords');
    console.log('Map clicked at coordinates:', coords);
  };

  const handleDateChange = (date) => {
    console.log('–í—ã–±—Ä–∞–Ω–∞ –¥–∞—Ç–∞:', date);
    // –∑–¥–µ—Å—å –º–æ–∂–Ω–æ –ø–æ–¥–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∫–∞—Ä—Ç—ã –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
  };

  const zoomInHandler = () => {
    const map = mapRef.current;
    if (!map) return;
    const current = map.getZoom();
    map.setZoom(current + 1, { duration: 300 }); // –ø–ª–∞–≤–Ω–æ–µ –ø—Ä–∏–±–ª–∏–∂–µ–Ω–∏–µ
  };
  const zoomOutHandler = () => {
    const map = mapRef.current;
    if (!map) return;
    const current = map.getZoom();
    map.setZoom(current - 1, { duration: 300 }); // –ø–ª–∞–≤–Ω–æ–µ –æ—Ç–¥–∞–ª–µ–Ω–∏–µ
  };
  const zoomToUserHandler = () => {
    const map = mapRef.current;
    if (!map || !('geolocation' in navigator)) return;

    const goTo = (lat, lon) => {
      const target = [lon, lat]; // <-- –ø–æ—Ä—è–¥–æ–∫ –º–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏
      map.panTo(target, { duration: 500 }).then(() => {
        const z = map.getZoom ? map.getZoom() : 9;
        map.setZoom(Math.max(z, 14), { duration: 300 });
      });
    };

    const opts = {
      enableHighAccuracy: true, // –ø—Ä–æ—Å–∏–º GPS/–¥–∞—Ç—á–∏–∫–∏
      timeout: 8000, // –∂–¥—ë–º –¥–æ 8—Å
      maximumAge: 0, // –Ω–µ –±–µ—Ä–µ–º —Å—Ç–∞—Ä—ã–π –∫–µ—à
    };

    navigator.geolocation.getCurrentPosition(
      ({ coords }) => {
        goTo(coords.latitude, coords.longitude); // –ø–æ—Ä—è–¥–æ–∫ lat, lon
      },
      (err) => {
        console.warn('Geolocation error:', err);
        // Fallback: –æ—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π —Ü–µ–Ω—Ç—Ä –∏–ª–∏ –ø–æ–∫–∞–∂–∏—Ç–µ –ø–æ–¥—Å–∫–∞–∑–∫—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
      },
      opts,
    );
  };

  return (
    <YMaps query={{ apikey: config.YANDEX_MAP_API_KEY, lang: 'ru_RU', coordorder: 'longlat' }}>
      <div className="map-container">
        <Map
          defaultState={{ center: [37.57, 55.75], zoom: 4, controls: [] }} // [lon, lat]
          width="100%"
          height="100svh"
          options={{
            minZoom: 3, // –¥–∞–ª—å—à–µ –æ—Ç–¥–∞–ª—è—Ç—å –Ω–µ–ª—å–∑—è
            maxZoom: 18, // –¥–∞–ª—å—à–µ –ø—Ä–∏–±–ª–∏–∂–∞—Ç—å –Ω–µ–ª—å–∑—è
            avoidFractionalZoom: true, // (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞ –¥–µ—Å–∫—Ç–æ–ø–µ) –±–µ–∑ –¥—Ä–æ–±–Ω—ã—Ö –∑—É–º–æ–≤
            restrictMapArea: [
              [-179.99, -85.0], // [lon, lat]
              [179.99, 85.0],
            ],
          }}
          instanceRef={(m) => {
            mapRef.current = m;
            setMapReady(true);
          }}
          onClick={(e) => mapClickHandler(e)}
        />
      </div>
      <MapSearchBar />
      <MapFilter />
      <SideBar />
      <NavigateButtons
        onZoomToUser={zoomToUserHandler}
        onZoomIn={zoomInHandler}
        onZoomOut={zoomOutHandler}
      />
      <MapCalendar onDateChange={handleDateChange} />
    </YMaps>
  );
}

export default MapComponent;
